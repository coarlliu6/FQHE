#include "basis.h"
#include <iostream>
#include <fstream>
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <complex>

basis::basis(int n1_, int n2_, int nOrb_, int qn_, int s_, char type_)
{
  n1 = n1_;
  n2 = n2_;
  nOrb = nOrb_;
  qn = qn_;
  s = s_;
  type = type_; 
}

int basis::bGen()
{
  switch(type)
    {
    case 'D': dGen();
      break;
    case 'T': tGen();
      break;
    }
  std::cout << "dim = " << dim << std::endl;
  return dim;
}

void basis::print()
{
  using namespace std;
  int i;
  cout << "The generated bases are:" << endl;
  cout << "n1 = " << n1 << ", n2 = " << n2 << ", nOrb = " << nOrb << ", qn = " << qn << endl;
  cout << "------ from the large orbital to the small ------" << endl;
  for (i = 0; i < dim; i++)
    {
      cout << bases[i]
	   << " "
	   << i << ": ";
      if (type == 'T')
	cout << tStSetNo[i] << " -> ";
      deciToPBShow(bases[i]);
      cout <<endl;
    }
  cout << "dim = " << dim << endl;
}

void basis::debug()
{
  using namespace std;
  // read hpc basis
  int hpcB[dim][n1 + n2];
  int temp;
  ifstream fin;
  fin.open("hpcBasis");
  fin >> temp; fin >> temp;
  for (int i = 0; i < dim; i++)
    {
      //      cout << i << ": ";
      for (int j = 0; j < n1 + n2; j++)
	{
	  fin >> hpcB[i][j];
	  //	  cout << hpcB[i][j] << " ";
	}
      //
      cout << endl;
    }
  fin.close();
  // record basis here in particle basis
  int B[dim][n1 + n2];
  for (int i = 0; i < dim; i++)
    {
      int no1 = n1 - 1, no2 = n2 - 1;
      int deciShift = (int) (pow(2, nOrb) + 0.5);
      int dec1 = bases[i] / deciShift, dec2 = bases[i] % deciShift; 
      int orb = nOrb - 1;
      do
	{
	  switch (dec1 % 2)
	    {
	    case 1:
	      B[i][no1--] = orb + 1;
	      orb--;
	      break;
	    case 0:
	      orb--;
	      break;
	    }
	  dec1=dec1/2;
	} while (orb >= 0);
      orb = nOrb - 1;
      do
	{
	  switch (dec2 % 2)
	    {
	    case 1:
	      B[i][n1 + no2] = orb + 1;
	      no2--;
	      orb--;
	      break;
	    case 0:
	      orb--;
	      break;
	    }
	  dec2=dec2/2;
	} while (orb >= 0);
    }
  //  cout << endl << "bases here are:" << endl;
  for (int i = 0; i < dim; i++)
    {
      //      cout << i << ": ";
      for (int j = 0; j < n1 + n2; j++)
	{
	  //	  cout << B[i][j] << " ";
	}
      //      cout << endl;
    }
  // match my basis, and generate the array bCompare[]
  bCompare = new long[dim];
  int tempa[n1 + n2], tt;
  for (int i = 0; i < dim; i++)
    for (int j = 0; j < dim; j++)
      {
	for (int k = 0; k < N; k++)
	  {
	    for (int l = 0; l < n1 + n2; l++)
	      {
		tempa[l] = (hpcB[j][l] + q * k) % nOrb;
		if (tempa[l] == 0)
		  tempa[l] = nOrb;
		//		cout << tempa[l] << " ";
	      }
	    //	    cout << endl;
	    if (tempa[0] > tempa[1])
	      {
		tt = tempa[0];
		tempa[0] = tempa[1];
		tempa[1] = tt;
	      }
	    if (tempa[2] > tempa[3])
	      {
		tt = tempa[2];
		tempa[2] = tempa[3];
		tempa[3] = tt;
	      }
	    if (tempa[0] == B[i][0] &&
		tempa[1] == B[i][1] &&
		tempa[2] == B[i][2] &&
		tempa[3] == B[i][3]
		)
	      {
		bCompare[i] = j;
		break;
	      }
	    else 
	      continue;
	  }
      }
  // for (int i = 0; i < dim; i++)
  //   cout << "i: " << i << " -> " << bCompare[i] << endl;
}

void basis::debugM()
{
  using namespace std;
  // the matrix from hpc:
  cout << "============ the matrix from HPC is ==============" << endl;
  int temp;
  int dimH;
  int sizeH;
  int* pcolH;
  int* rowH;
  std::complex<double>* ACH;
  ifstream fin;
  fin.open("hpcM");
  fin >> sizeH;
  fin >> dimH;
  pcolH = new int[dimH + 1];
  rowH = new int[sizeH];
  ACH = new std::complex<double>[sizeH];
  for (int i = 0; i < dimH; i++)
    {
      //      cout << "i - > " << i << ": ";
      fin >> pcolH[i];
      //      cout << pcolH[i] << " ";
    }
  pcolH[dimH] = pcolH[dimH - 1] + 1;
  cout << endl;
  for (int i = 0; i < sizeH; i++)
    {
      fin >> rowH[i];
      fin >> ACH[i];
      //  cout << rowH[i] << " ";
      //  cout << ACH[i] << " ";
    } 
  fin.close();
  /*
  for (int j = 0; j < dimH; j++)
    cout << bCompare[j] << " ";
  cout << endl;
  */
  for (int j = 0; j < dimH; j++)
    {
      cout << "c" << j << ": ";
      for (int i = j; i < dimH; i++)
	{
	  int ii = std::max(bCompare[i], bCompare[j]),
	    jj = std::min(bCompare[i], bCompare[j]);
	  //	  cout << "ii: " << ii << "jj: " << jj << endl;
	  //	  cout << pcolH[ii] << ", " << pcolH[jj] << endl;
	  int sign = 0;
	  for (int k = pcolH[jj]; k < pcolH[jj + 1]; k++)
	    if (rowH[k] == ii)
	      {
		cout << std::setw(5) << std::setprecision(4) << ACH[k] << " ";
		sign = 1;
	      }
	  if (sign == 0)
	    cout << std::setw(5) << 0 << " ";
	}
      cout << endl;
      cout << endl;
    }
}
