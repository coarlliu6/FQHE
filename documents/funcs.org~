#+PROPERTY: use_ALL basis interaction matrix signalization
#+PROPERTY: geometry_ALL general disk torus
#+PROPERTY: interaction_ALL general Coulomb "Hard core"
#+PROPERTY: typeInClass_ALL private public protected "not in class"

* basis
  :PROPERTIES:
  :use:      basis
  :interaction: general
  :END:
  [[file:basis/basis.h]]    
** constructor  
   :PROPERTIES:
   :geometry: general
   :typeInClass: public
   :END:
   [[file:basis/publicFuncs.cpp]]
   
** pBToDeci
   :PROPERTIES:
   :geometry: general
   :typeInClass: private
   :END:
   Translate the orbital basis to a decimal number.
   [[file:basis/tool.cpp]]
   
** pBToQN
   :PROPERTIES:
   :geometry: general
   :typeInClass: private
   :END:
   Return the quantum number of that orbital basis
   [[file:basis/tool.cpp]]
   
** deciToBi
   :PROPERTIES:
   :geometry: general
   :typeInClass: private
   :END:
   Convert a decimal number to binary number(like 5 -> 101)
   [[file:basis/tool.cpp]]
   
** constr
   :PROPERTIES:
   :geometry: general
   :typeInClass: private
   :END:
   Construct the bases in a certain component.
   [[file:basis/constr.cpp]]

** dGen
   :PROPERTIES: use constr() fxn to create all basis and then choose those 
                satisfy required angular momentum.
   :geometry: disk
   :typeInClass: private
   :END:
   Generate the basis for disk geometries.
   [[file:basis/dGen.cpp]]

** sTBasisJudge
   :PROPERTIES:
   :geometry: torus
   :typeInClass: private
   :END:
   Judge if a certain base can be kept for torus geometry or not (single component). In each set, keep the one with the largest correspondent decimal number.
   [[file:basis/tGen.cpp]]
   
** sTBasisJudge
   :PROPERTIES:
   :geometry: torus
   :typeInClass: private
   :END:
   Judge if a certain base can be kept for torus geometry or not (two component). In each set, keep the one with the largest correspondent decimal number.
   [[file:basis/tGen.cpp]]

** tGen
   :PROPERTIES:
   :geometry: torus
   :typeInClass: private
   :END:
   Generate the torus kind basis.
   [[file:basis/tGen.cpp]]

** bGen
   :PROPERTIES: input=> D or T ; output=> dim ; call dGen() fxn
   :geometry: general
   :typeInClass: public
   :END:
   Use different functions to generate bases dependent on the geometry of the problem.
   [[file:basis/publicFuncs.cpp]]

** print
   :PROPERTIES:
   :geometry: general
   :typeInClass: public
   :END:
   Print out the bases in the terminal.
   [[file:basis/publicFuncs.cpp]]
   
* interaction
  :PROPERTIES:
  :use:      interaction
  :END:
  disk codes have not been tested.
  [[file:interaction/interaction.h]]    
** parameters:
   type[3] = GI; 
   // G(geometry): (D)disk; (T)torus. I(interaction): C(Coulomb); H(hard core); D(dipolar).
   param[4] = {a, b, c1, c2};
   // Don't have to be filled. a, b are the width and length of square lattice; c1 and c2 are the coefficients of 0th, 1st order hard core interaction.
** constructor
   :PROPERTIES:
   :geometry: general
   :interaction: general
   :typeInClass: public
   :END:
   [[file:interaction/publicFuncs.cpp]]
   
** dFCoulomb
   :PROPERTIES: return a number call 2*pi/k, where k is an input.
   :geometry: disk
   :interaction: Coulomb
   :typeInClass: not in class
   :END:
   [[file:interaction/vmIntegrand.cpp]]

** vmIntegrand
   :PROPERTIES: define the fxn form for the integral of V^(eff) _(n,m); n & m are the higher L.L.
   :geometry: disk
   :interaction: general
   :typeInClass: not in class
   :END:
   [[file:interaction/vmIntegrand.cpp]]

** vm
   :PROPERTIES: create a struc in gsl with fxn, F, and *param; define the fxn form as "vmIntegrand", and then integrate the fxn by using gsl fxn
   :geometry: disk
   :interaction: general
   :typeInClass: private
   :END:
   [[file:interaction/dItr.cpp]]

** itrGen
   :PROPERTIES: use dItr to calculate all coefficients, (m1,m2|v|m3,m4)
   :geometry: general
   :interaction: general
   :typeInClass: public
   :END:
   [[file:interaction/publicFuncs.cpp]]

** dItr(tItr)
   :PROPERTIES: store all results of cgc and vm to have (m1,m2|v|m3,m4)
   :geometry: disk (tItr)
   :interaction: general
   :typeInClass: private
   :END:
   [[file:interaction/dItr(tItr).cpp]]

** cgc
   :PROPERTIES: calculate the cg coefficient for map (m1,m2) to (m, M)
   :geometry: general
   :interaction: general
   :typeInClass: private
   :END:
   [[file:interaction/dItr.cpp]]
** itrPrint
   :PROPERTIES:
   :geometry: general
   :interaction: general
   :typeInClass: public
   :END:
   [[file:interaction/publicFuncs.cpp]]
   
* matrix
  :PROPERTIES:
  :use:      matrix
  :interaction: general
  :END:
  [[file:matrix/matrix.h]]
  The matrix may be real(in disk) or complex(in torus) matrix. \\
  If the class matrix is written as a class template, \\
  the member functions and class declaration need to be in the same file. \\
  That gives me a too large single file. \\
  Therefore, instead of writing a class template, \\
  I just define all the possible needed variable(real or complex) \\
  in the class's declaration.
** parameters:
   sizeCountType = GO;
   // G(geometry): (D)disk; (T)torus.
   // O(option): (E)estimate the size of the matrix; \\
   // (C)count the size of the matrix.

** constructor
  :PROPERTIES:
  :geometry: general
  :END:
  [[file:matrix/publicFuncs.cpp]]

** estimateSize
  :PROPERTIES:
  :geometry: general
  :END:
  [[file:matrix/countSize.cpp]]

** countSize
   :PROPERTIES:
   :geometry: torus
   :END:
   [[file:matrix/countSize.cpp]]
   omp parallel code

** deciToPOS
   :PROPERTIES:
   :geometry: general
   :END: 
   trasform a decimal number to the particle, anti-particle and oribtal basis for single-layer cases. 
   [[file:matrix/tool.cpp]]

** deciToPOB
   :PROPERTIES:
   :geometry: general
   :END:
   Transform a decimal number to the particle, anti-particle and orbital basis.
   [[file:matrix/tool.cpp]]

** binarySearchBToS
   :PROPERTIES:
   :geometry: general
   :END: 
   Given a deci number, search its position in the bases array by binary search method.
   [[file:matrix/tool.cpp]]

** diaME
   :PROPERTIES:
   :geometry: disk
   :END:
   [[file:matrix/diaME.cpp]]

** dOffME
   :PROPERTIES: calculate the interaction components and store them in ATemp, rowTemp(position), and count rNo.
   :geometry: disk
   :END: return rNo and change 
   [[file:matrix/dME.cpp]]
   
** tOffME
   :PROPERTIES:
   :geometry: torus
   :END:
   [[file:matrix/tME.cpp]]

** tLocateME
   :PROPERTIES:
   :geometry: torus
   :END:
   [[file:matrix/tMETool.cpp]]
   This function change the deci to the one kept by torus' bases; \\
   return the phase difference between the original deci state \\
   and changed deci state.

** binarySearch
   :PROPERTIES:
   :geometry: general
   :END:
   [[file:matrix/tool.cpp]]

** sgnChange
   :PROPERTIES:
   :geometry: torus
   :END:
   [[file:matrix/tMETool.cpp]]
   There are some factors need to be considered.

** tScatteredValue
   :PROPERTIES:
   :geometry: torus
   :END:
   [[file:matrix/tMETool.cpp]]

** tStoreValue
   :PROPERTIES:
   :geometry: torus
   :END:
   [[file:matrix/tMETool.cpp]]
   Different sized estimated methods lead to different storing data structure.
  
** tNewJudge
   :PROPERTIES:
   :geometry: torus
   :END:
   [[file:matrix/tMETool.cpp]]
   Need this when the customer try to exactly calculate the size of the matrix.
  
** mGen
   :PROPERTIES:
   :geometry: general
   :END:
   [[file:matrix/publicFuncs.cpp]]

** print
   :PROPERTIES:
   :geometry: general
   :END:
   [[file:matrix/publicFuncs.cpp]]

* remarks
** orbital basis
ex: basis[4] = {1, 0, 1, 0};

** particle basis
ex: basis[2] = {0, 2} = {1, 0, 1, 0}(orbital basis);

** relation between decimal number and orbital basis
ex: basis[4] = {1, 0, 1, 0} <=> decimal no. = 10;
